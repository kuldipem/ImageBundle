{"name":"Imagebundle","tagline":"","body":"------------\r\nCompatibility with bootstrap 3.X\r\n------------\r\n\r\nKemImageBundle\r\n============\r\n\r\nImage upload / crop bundle for Symfony2\r\n\r\nThis bundle helps you easily create an image upload / crop field in your forms. You don't need to use any type of generator or there is no other requirements.\r\nIt uses bootstrap to make it look well but you can use any other css to customize it.\r\n\r\nIt uses beautiful [Jquery File Upload](http://blueimp.github.io/jQuery-File-Upload/) to upload files (original UploadHandler has been modified to add namespace and a new config parameter to generate random filenames) and [JCrop](http://deepliquid.com/content/Jcrop.html) to let you crop uploaded images.\r\n\r\nyou can also save original file in a separate field** See saveOriginal parameter below.\r\n\r\nyou can also create sortable & croppable gallery widgets** without any specific configuration. It only needs an array typed property in your entity (and a text column in your database). See below for examples, screenshots and how to use it.\r\n\r\nScreen shots\r\n------------\r\n\r\nHere are some screen shots since i didn't have time to put a demo yet:\r\n\r\n###Simple Image widget###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/image_widget_ss1.png)\r\n\r\n###Gallery widget###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/gallery_widget_ss1.png)\r\n\r\n###Upload image screen###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/upload_image_ss1.png)\r\n\r\n###Select image from library screen###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/select_image_ss1.png)\r\n\r\n###Crop image screen###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/crop_image_ss1.png)\r\n\r\n###Change gallery image order screen###\r\n\r\n![alt tag](http://canomur.com/kem-image/images/order_image_ss1.png)\r\n\r\nInstallation\r\n------------\r\n\r\n1. Add this bundle to your project in composer.json:\r\n\r\n\t```\r\n    {\r\n        \"require\": {\r\n            \"kem/image-bundle\": \"1.0.*@dev\",\r\n        }\r\n    }\r\n    ```\r\n\r\n2. Register FOSJsRouting and this bundle to your app/AppKernel.php:\r\n\r\n    ```\r\n    // app/AppKernel.php\r\n    public function registerBundles()\r\n    {\r\n        return array(\r\n            // ...\r\n            new FOS\\JsRoutingBundle\\FOSJsRoutingBundle(),\r\n            new JMS\\TranslationBundle\\JMSTranslationBundle(),\r\n            new Kem\\ImageBundle\\KemImageBundle(),\r\n            // ...\r\n        );\r\n    }\r\n    ```\r\n3. Add this route to your routing.yml:\r\n\r\n    ```\r\n    # app/config/routing.yml\r\n    fos_js_routing:\r\n    \tresource: \"@FOSJsRoutingBundle/Resources/config/routing/routing.xml\"\r\n    \t\r\n    kem_image:\r\n        resource: \"@KemImageBundle/Resources/config/routing.yml\"\r\n        prefix:   /\r\n    ```\r\n \r\n4. Add Modal template after body tag of your layout:\r\n\t\r\n\t```\r\n\t<body>\r\n\t{% include \"KemImageBundle:Form:croppable_image_modal.html.twig\"%}\r\n\t…\r\n\t</body>\r\n\r\n\t```\r\n\r\n**Note:** This template includes many script and styles including jquery and bootstrap. You can use following parameters to avoid jquery and/or bootstrap being included:\r\n\r\n```\r\n{% include \"KemImageBundle:Form:croppable_image_modal.html.twig\" with {'include_jquery': false, 'include_bootstrap': false} %}\r\n```\r\n\t\r\n5. Do not forget to put [FOSJSRoutingBundle](https://github.com/FriendsOfSymfony/FOSJsRoutingBundle) script in your <head>:\r\n\r\n```\r\n\t<script src=\"{{ asset('bundles/fosjsrouting/js/router.js') }}\"></script>\r\n\t<script src=\"{{ path('fos_js_routing_js', {\"callback\": \"fos.Router.setData\"}) }}\"></script>\r\n```\r\n\r\nThat's it !\r\n\r\nConfiguration\r\n-------------\r\n<br/>\r\n**All parameters are optional:**\r\n\r\n\tkem_image:\r\n\t\tconfig:\r\n\t\t\tcropped_image_dir: 'cropped'\r\n\t\t\tthumbs_dir: 'thumbnails'\r\n\t\t\tmedia_lib_thumb_size: 150\r\n\t\t\tweb_dirname: 'web'\r\n\t\t\ttranslation_domain: 'KemImageBundle'\r\n\t\t\tgallery_thumb_size: 150\r\n\t\t\tgallery_dir: 'gallery'\r\n\r\n###cropped_image_dir###\r\n\r\nIt's used to determine relative directory name to put cropped images (see above).\r\n\r\n**Default value:** 'cropped'\r\n\r\n###thumbs_dir###\r\n\r\nIt's used to determine relative directory name to put thumbnails (see above).\r\n\r\n**Default value:** 'thumbnails'\r\n\r\n###media_lib_thumb_size###\r\n\r\nIt's used to determine thumbnails size in pixels (squares) used in media library.\r\n\r\n**Default value:** 150\r\n\r\n###upload_dir###\r\n\r\nDirname of your public directory. It's used to check thumb existence in thumb twig helper.\r\n\r\n**Default value:** 'web'\r\n\r\n###translation_domain###\r\n\r\nDomain name for translations. For instance two languages are provided (en & fr). To override the domain name, change this parameter to whatever you want.\r\n\r\n**Default value:** 'KemImageBundle'\r\n\r\n###gallery_thumb_size###\r\n\r\nThat's the image size in pixels that you want to show in gallery widget. Gallery widget will automaticaly create square thums having this size and show them in the gallery widget.\r\n\r\n**Default value:** 150\r\n\r\n###gallery_dir###\r\n\r\nThat's the gallery directory name. The widget will store all gallery images in a specific directory inside the root directory that you will give when you will add the widget to your forms.\r\n\r\n**For eg.** if you put 'uploads/images' as webDir when you add the widget, gallery images will be stored in 'uploads/images/*[gallery_dir]*'. This is added to make gallery use easier so you don't have to add new functions to your entities to get gallery dirs.\r\n\r\n#Usage#\r\n\r\n\r\nThere are two widgets provided with this bundle. They both have exacly same config parameters.\r\n\r\nImage widget\r\n------------\r\n\r\nUse widget in your forms (works with SonataAdmin too) to create a simple image field :\r\n    \r\n    public function buildForm(FormBuilderInterface $builder, array $options)\r\n    {\r\n\t    // get your entity related with your form type\r\n\t    $myEntity = $builder->getForm()->getData();\r\n\t    ...\r\n\t    ->add('image', 'kem_image', array(\r\n\t        'uploadConfig' => array(\r\n\t            'uploadRoute' => 'kem_api_upload', \t\t//optional\r\n\t            'uploadUrl' => $myEntity->getUploadRootDir(),       // required - see explanation below (you can also put just a dir path)\r\n\t            'webDir' => $myEntity->getUploadDir(),\t\t\t\t// required - see explanation below (you can also put just a dir path)\r\n\t            'fileExt' => '*.jpg;*.gif;*.png;*.jpeg', \t//optional\r\n\t            'libraryDir' => null, \t\t\t\t\t\t//optional\r\n\t            'libraryRoute' => 'kem_api_image_library', //optional\r\n\t            'showLibrary' => true, \t\t\t\t\t\t//optional\r\n\t            'saveOriginal' => 'originalImage'\t\t\t//optional\r\n\t        ),\r\n\t        'cropConfig' => array(\r\n\t            'minWidth' => 588,\r\n\t            'minHeight' => 300,\r\n\t            'aspectRatio' => true, \t\t\t\t//optional\r\n\t            'cropRoute' => 'kem_api_crop', \t//optional\r\n\t            'forceResize' => false, \t\t\t//optional\r\n\t            'thumbs' => array( \t\t\t\t\t//optional\r\n\t            \tarray(\r\n\t            \t\t'maxWidth' => 180,\r\n\t            \t\t'maxHeight' => 400,\r\n\t            \t\t'useAsFieldImage' => true  //optional\r\n\t            \t)\r\n\t            )\r\n\t        )\r\n\t    ))\r\n    \r\nYou need to create a field (named image in this example but you can choose whatever you want):\r\n\r\n\t// YourBundle\\Entity\\YourEntity.php\r\n\t\r\n\t…\r\n\t\r\n\t/**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    protected $image;\r\n    \r\n    …\r\n    \r\nAnd create your functions in your entity to have directory paths, for ex :\r\n\r\n\tpublic function getUploadRootDir()\r\n\t{\r\n\t    // absolute path to your directory where images must be saved\r\n\t    return __DIR__.'/../../../../../web/'.$this->getUploadDir();\r\n\t}\r\n\t\r\n\tpublic function getUploadDir()\r\n\t{\r\n\t    return 'uploads/myentity';\r\n\t}\r\n\t\r\n\tpublic function getAbsolutePath()\r\n\t{\r\n\t    return null === $this->image ? null : $this->getUploadRootDir().'/'.$this->image;\r\n\t}\r\n\t\r\n\tpublic function getWebPath()\r\n\t{\r\n\t    return null === $this->image ? null : '/'.$this->getUploadDir().'/'.$this->image;\r\n\t}\r\n    \r\nThat's all ! This will add an image preview with an edit button in your form and will let you upload / select from library and crop images without reloading the page.\r\n\r\nTo save original image path, you have to create another field and name it same as saveOriginal parameter:\r\n\r\n\t// YourBundle\\Entity\\YourEntity.php\r\n\t\r\n\t…\r\n\t\r\n\t/**\r\n     * @ORM\\Column(type=\"string\", length=255, nullable=true)\r\n     */\r\n    protected $originalImage;\r\n    \r\n    …\r\n\r\n\r\n\r\nI will put a demo soon…\r\n\r\nGallery widget\r\n------------\r\n\r\nUse widget in your forms (works with SonataAdmin too) to create a **sortable** list of images (so a gallery :)) stored in an array typed field :\r\n\r\n\t->add('gallery', 'kem_gallery', array(\r\n\t\t//same parameters as kem_image\r\n\t))\r\n\t\r\nAnd create your array typed field for storing images in it. Doctrine (or other ORM) will serialize this field to store it as string in the DB.\r\n\r\n\t// YourBundle\\Entity\\YourEntity.php\r\n\t\r\n\t…\r\n\t\r\n\t/**\r\n     * @ORM\\Column(type=\"array\", nullable=true)\r\n     */\r\n    protected $gallery;\r\n    \r\n    …\r\n    \r\nAnd create your functions in your entity to have directory paths, for ex :\r\n\r\n\tpublic function getUploadRootDir()\r\n    {\r\n        // absolute path to your directory where images must be saved\r\n        return __DIR__.'/../../../../../web/'.$this->getUploadDir();\r\n    }\r\n\r\n    public function getUploadDir()\r\n    {\r\n        return 'uploads/myentity';\r\n    }\r\n\r\n    public function getAbsolutePath()\r\n    {\r\n        return null === $this->image ? null : $this->getUploadRootDir().'/'.$this->image;\r\n    }\r\n\r\n    public function getWebPath()\r\n    {\r\n        return null === $this->image ? null : '/'.$this->getUploadDir().'/'.$this->image;\r\n    }\r\n\r\nThat's all ! This will create a widget like on the following image when you will use it in your forms. **You can also reorder them since php serialized arrays are ordered**:\r\n\r\nGallery images will be stored in uploadUrl / gallery_dir (default is gallery). Cropped images will be stored in uploadUrl / gallery_dir / cropped_dir (same as image widget) and thumbs in uploadUrl / gallery_dir / cropped_dir / thumb_dir with specified width. So if you pu\r\n\r\n##uploadConfig##\r\n\r\n###uploadRoute (optional)###\r\n\r\nRoute called to send uploaded file. It's recommended to not change this parameter except if you know exactly what you do.\r\n\r\n**Default value:** kem_api_upload\r\n\r\n###uploadUrl (required)###\r\n\r\nAbsolute url to directory where put uploaded image. I recommend you to create a function in your entity and call it like it's showen in the example:\r\n    \r\n    public function getUploadRootDir()\r\n    {\r\n        // absolute path to your directory where images must be saved\r\n        return __DIR__.'/../../../../../web/'.$this->getUploadDir();\r\n    }\r\n\r\n    public function getUploadDir()\r\n    {\r\n        return 'uploads/myentity';\r\n    }\r\n\r\n    public function getAbsolutePath()\r\n    {\r\n        return null === $this->image ? null : $this->getUploadRootDir().'/'.$this->image;\r\n    }\r\n\r\n    public function getWebPath()\r\n    {\r\n        return null === $this->image ? null : '/'.$this->getUploadDir().'/'.$this->image;\r\n    }\r\n\r\n\r\n###webDir (required)###\r\n\r\nUrl used to show your image in templates, must be relative url. If you created related functions as explained in uploadUrl section, then you can user getWebPath() function for webDir parameter.\r\n\r\n###fileExt (optional)###\r\n\r\nPermitted image extensions.\r\n\r\n**Default value:** '*.jpg;*.gif;*.png;*.jpeg'\r\n\r\n###libraryDir (optional)###\r\n\r\nDirectory to look into for images to show in image library.\r\n\r\n**Default value:** uploadUrl\r\n\r\n###libraryRoute (optional)###\r\n\r\nRoute called to get images to show in library. I recommend you to not change this parameter if you don't know exactly what it does.\r\n\r\n**Default value:** kem_api_image_library\r\n\r\n###showLibrary (optional)###\r\n\r\nSet this to false if you don't want the user see existing images in libraryDir.\r\n\r\n**Default value:** true\r\n\r\n###saveOriginal (optional)###\r\n\r\nUse this parameter if you want to save original file's path (for eg. to show big image in a lightbox). You have to put property name of your entity and the bundle will use it to save original file path in it.\r\n\r\n**Attention:** This parameter is disabled for gallery for instance. It will be implemented soon.\r\n\r\n**Default value:** false\r\n\r\n##cropConfig##\r\n\r\n###minWidth (optional)###\r\n\r\nMinimum with of desired image.\r\n\r\n**Default value:** 1\r\n\r\n###minHeight (optional)###\r\n\r\nMinimum height of desired image.\r\n\r\n**Default value:** 1\r\n###aspectRatio (optional)###\r\n\r\nTrue to aspect ratio of crop screen.\r\n\r\n**Default value:** true\r\n\r\n###cropRoute (optional)###\r\n\r\nRoute to crop action. I recommend you to not change this parameter if you don't know exactly what it does.\r\n\r\n**Default value:** kem_api_crop\r\n\r\n\r\n###forceResize (optional)###\r\n\r\nIf true, system will resize image to fit minWidth and minHeight.\r\n\r\n###thumbs (optional)###\r\n\r\nArray of thums to create automaticly. System will resize images to fit maxWidth and maxHeight. It will put them in \"uploadDir/cropped_images_dir/thumbs_dir/widthxheight-originalfilename.extension\" so you can use included Thumb Twig extension to get them, ex:\r\n\r\n```\r\n{# your_themplate.html.twig #}\r\n<img src=\"{{ entity.imagePath|thumb(45, 56) }}\"\r\n\t\t\t\r\n```\r\n\r\n**New in 0.2.2:** You can use 'useAsFieldImage' option to use this thumb as image field's preview (in your form you will see this thumb instead of original cropped image). Usefull when you have big cropped images.\r\n\r\n#TODO LIST#\r\n\r\n* Create tests\r\n* Add more comments in the code\r\n* Think about removed image deletion (for now images are not deleted, you have to care about it by yourself…)\r\n* Update existing images list dynamicly after an image upload\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}